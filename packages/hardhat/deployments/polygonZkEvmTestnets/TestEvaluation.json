{
  "address": "0xa320bC0Dab2D0C556f270bcaebd86C0E85516d0E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chosenOptionIndex",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct TestEvaluation.UserResponse[]",
          "name": "responses",
          "type": "tuple[]"
        }
      ],
      "name": "ResponseSubmitted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "options",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "rightOptionIndex",
          "type": "uint256"
        }
      ],
      "name": "addQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserResponses",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chosenOptionIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct TestEvaluation.UserResponse[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rightOptionIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chosenOptionIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct TestEvaluation.UserResponse[]",
          "name": "responses",
          "type": "tuple[]"
        }
      ],
      "name": "submitResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userResponses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "questionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "chosenOptionIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x18beaf8edd708bd3f4be1a87ef863d843b4c25a75cd1a62718413fb17faf18f6",
  "receipt": {
    "to": null,
    "from": "0xA99AE32AA00d67bD9d1acD9b96c704AD0dEb66B1",
    "contractAddress": "0xa320bC0Dab2D0C556f270bcaebd86C0E85516d0E",
    "transactionIndex": 0,
    "gasUsed": "674626",
    "logsBloom": "0x
    "blockHash": "0x36c1b1e076779a6baa25d9f532bfc232609735c7223347a3f710d3f02c9c5349",
    "transactionHash": "0x18beaf8edd708bd3f4be1a87ef863d843b4c25a75cd1a62718413fb17faf18f6",
    "logs": [],
    "blockNumber": 4300842,
    "cumulativeGasUsed": "674626",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "b7311a24637f34d678cfd3ca052df623",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chosenOptionIndex\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TestEvaluation.UserResponse[]\",\"name\":\"responses\",\"type\":\"tuple[]\"}],\"name\":\"ResponseSubmitted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"options\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"rightOptionIndex\",\"type\":\"uint256\"}],\"name\":\"addQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserResponses\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chosenOptionIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct TestEvaluation.UserResponse[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rightOptionIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chosenOptionIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct TestEvaluation.UserResponse[]\",\"name\":\"responses\",\"type\":\"tuple[]\"}],\"name\":\"submitResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userResponses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chosenOptionIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourContract.sol\":\"TestEvaluation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/YourContract.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract TestEvaluation {\\r\\n    address public admin;\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"Only admin can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        admin = msg.sender; // The deployer of the contract is set as the initial admin\\r\\n    }\\r\\n\\r\\n    function transferAdmin(address newAdmin) public onlyAdmin {\\r\\n        admin = newAdmin; // Allows the current admin to transfer admin rights to another address\\r\\n    }\\r\\n\\r\\n    // Structure to represent a question with options and correct answer\\r\\n    struct Question {\\r\\n        uint256 id;\\r\\n        string[] options; // Array of option strings (a, b, c, d)\\r\\n        uint256 rightOptionIndex; // Index of the correct option in the options array\\r\\n    }\\r\\n\\r\\n    // Structure to represent a user's response for a question\\r\\n    struct UserResponse {\\r\\n        uint256 questionId;\\r\\n        uint256 chosenOptionIndex;\\r\\n    }\\r\\n\\r\\n    // Mapping of question ID to Question struct\\r\\n    mapping(uint256 => Question) public questions;\\r\\n\\r\\n    // Mapping of user address to their responses\\r\\n    mapping(address => UserResponse[]) public userResponses;\\r\\n\\r\\n    // Event emitted when a user submits their test response\\r\\n    event ResponseSubmitted(address user, UserResponse[] responses);\\r\\n\\r\\n    // Function to add a question to the contract\\r\\n    function addQuestion(\\r\\n        uint256 id,\\r\\n        string[] calldata options,\\r\\n        uint256 rightOptionIndex\\r\\n    ) public onlyAdmin {\\r\\n        require(options.length == 4, \\\"Question must have 4 options\\\");\\r\\n        require(rightOptionIndex < options.length, \\\"Right option index out of bounds\\\");\\r\\n        questions[id] = Question(id, options, rightOptionIndex);\\r\\n    }\\r\\n\\r\\n    // Function for a user to submit their test responses\\r\\n    function submitResponse(UserResponse[] calldata responses) public {\\r\\n        for (uint256 i = 0; i < responses.length; i++) {\\r\\n            require(questions[responses[i].questionId].id > 0, \\\"Invalid question ID\\\"); // Check if question exists\\r\\n            userResponses[msg.sender].push(responses[i]);\\r\\n        }\\r\\n\\r\\n        emit ResponseSubmitted(msg.sender, responses);\\r\\n    }\\r\\n\\r\\n    // Function to retrieve a user's responses\\r\\n    function getUserResponses(address user) public view returns (UserResponse[] memory) {\\r\\n        return userResponses[user];\\r\\n    }\\r\\n}\",\"keccak256\":\"0x0508788761376b380522f2e1cc6cb98dd969568e65e215f9dd03d851ae4a581c\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610ad7806100326000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b9456fe21161005b578063b9456fe2146100eb578063bdf75cb6146100fe578063bf9d24b71461011e578063f851a4401461013157600080fd5b806331b1b9781461008257806372f0ee90146100c357806375829def146100d8575b600080fd5b6100a961009036600461059b565b6001602052600090815260409020805460029091015482565b604080519283526020830191909152015b60405180910390f35b6100d66100d13660046105b4565b61015c565b005b6100d66100e6366004610655565b610292565b6100a96100f9366004610677565b6102de565b61011161010c366004610655565b61031a565b6040516100ba91906106a1565b6100d661012c3660046106f0565b6103a3565b600054610144906001600160a01b031681565b6040516001600160a01b0390911681526020016100ba565b6000546001600160a01b0316331461018f5760405162461bcd60e51b815260040161018690610765565b60405180910390fd5b600482146101df5760405162461bcd60e51b815260206004820152601c60248201527f5175657374696f6e206d75737420686176652034206f7074696f6e73000000006044820152606401610186565b81811061022e5760405162461bcd60e51b815260206004820181905260248201527f5269676874206f7074696f6e20696e646578206f7574206f6620626f756e64736044820152606401610186565b60408051606081019091528481526020810161024a84866107ed565b8152602090810183905260008681526001808352604090912083518155838301518051919361027e938501929101906104d6565b506040820151816002015590505050505050565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161018690610765565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600260205281600052604060002081815481106102fa57600080fd5b600091825260209091206002909102018054600190910154909250905082565b6001600160a01b0381166000908152600260209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561039857838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610352565b505050509050919050565b60005b81811015610496576000600160008585858181106103c6576103c66108c2565b90506040020160000135815260200190815260200160002060000154116104255760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081c5d595cdd1a5bdb881251606a1b6044820152606401610186565b336000908152600260205260409020838383818110610446576104466108c2565b835460018101855560009485526020909420604090910292909201926002029091019050610481828281358155602082013560018201555050565b5050808061048e906108d8565b9150506103a6565b507f20b88882b7930ec083632e0c29ef31c94fc6d853fdece8e13b00c4be0702def73383836040516104ca939291906108ff565b60405180910390a15050565b82805482825590600052602060002090810192821561051c579160200282015b8281111561051c578251829061050c90826109e1565b50916020019190600101906104f6565b5061052892915061052c565b5090565b808211156105285760006105408282610549565b5060010161052c565b50805461055590610958565b6000825580601f10610565575050565b601f0160209004906000526020600020908101906105839190610586565b50565b5b808211156105285760008155600101610587565b6000602082840312156105ad57600080fd5b5035919050565b600080600080606085870312156105ca57600080fd5b84359350602085013567ffffffffffffffff808211156105e957600080fd5b818701915087601f8301126105fd57600080fd5b81358181111561060c57600080fd5b8860208260051b850101111561062157600080fd5b95986020929092019750949560400135945092505050565b80356001600160a01b038116811461065057600080fd5b919050565b60006020828403121561066757600080fd5b61067082610639565b9392505050565b6000806040838503121561068a57600080fd5b61069383610639565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b828110156106e3578151805185528601518685015292840192908501906001016106be565b5091979650505050505050565b6000806020838503121561070357600080fd5b823567ffffffffffffffff8082111561071b57600080fd5b818501915085601f83011261072f57600080fd5b81358181111561073e57600080fd5b8660208260061b850101111561075357600080fd5b60209290920196919550909350505050565b60208082526021908201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6040820152603760f91b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156107e5576107e56107a6565b604052919050565b600067ffffffffffffffff80841115610808576108086107a6565b8360051b60206108198183016107bc565b86815291850191818101903684111561083157600080fd5b865b848110156108b65780358681111561084b5760008081fd5b8801601f368183011261085e5760008081fd5b813588811115610870576108706107a6565b610881818301601f191688016107bc565b915080825236878285010111156108985760008081fd5b80878401888401376000908201870152845250918301918301610833565b50979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016108f857634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b03841681526040602080830182905282820184905260009190859060608501845b8781101561094b578335825282840135838301529284019290840190600101610927565b5098975050505050505050565b600181811c9082168061096c57607f821691505b60208210810361098c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156109dc57600081815260208120601f850160051c810160208610156109b95750805b601f850160051c820191505b818110156109d8578281556001016109c5565b5050505b505050565b815167ffffffffffffffff8111156109fb576109fb6107a6565b610a0f81610a098454610958565b84610992565b602080601f831160018114610a445760008415610a2c5750858301515b600019600386901b1c1916600185901b1785556109d8565b600085815260208120601f198616915b82811015610a7357888601518255948401946001909101908401610a54565b5085821015610a915787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220cb510892072de9c2328835335b2a755d4910e814aebde64d6a43df535121d3e364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b9456fe21161005b578063b9456fe2146100eb578063bdf75cb6146100fe578063bf9d24b71461011e578063f851a4401461013157600080fd5b806331b1b9781461008257806372f0ee90146100c357806375829def146100d8575b600080fd5b6100a961009036600461059b565b6001602052600090815260409020805460029091015482565b604080519283526020830191909152015b60405180910390f35b6100d66100d13660046105b4565b61015c565b005b6100d66100e6366004610655565b610292565b6100a96100f9366004610677565b6102de565b61011161010c366004610655565b61031a565b6040516100ba91906106a1565b6100d661012c3660046106f0565b6103a3565b600054610144906001600160a01b031681565b6040516001600160a01b0390911681526020016100ba565b6000546001600160a01b0316331461018f5760405162461bcd60e51b815260040161018690610765565b60405180910390fd5b600482146101df5760405162461bcd60e51b815260206004820152601c60248201527f5175657374696f6e206d75737420686176652034206f7074696f6e73000000006044820152606401610186565b81811061022e5760405162461bcd60e51b815260206004820181905260248201527f5269676874206f7074696f6e20696e646578206f7574206f6620626f756e64736044820152606401610186565b60408051606081019091528481526020810161024a84866107ed565b8152602090810183905260008681526001808352604090912083518155838301518051919361027e938501929101906104d6565b506040820151816002015590505050505050565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161018690610765565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600260205281600052604060002081815481106102fa57600080fd5b600091825260209091206002909102018054600190910154909250905082565b6001600160a01b0381166000908152600260209081526040808320805482518185028101850190935280835260609492939192909184015b8282101561039857838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610352565b505050509050919050565b60005b81811015610496576000600160008585858181106103c6576103c66108c2565b90506040020160000135815260200190815260200160002060000154116104255760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081c5d595cdd1a5bdb881251606a1b6044820152606401610186565b336000908152600260205260409020838383818110610446576104466108c2565b835460018101855560009485526020909420604090910292909201926002029091019050610481828281358155602082013560018201555050565b5050808061048e906108d8565b9150506103a6565b507f20b88882b7930ec083632e0c29ef31c94fc6d853fdece8e13b00c4be0702def73383836040516104ca939291906108ff565b60405180910390a15050565b82805482825590600052602060002090810192821561051c579160200282015b8281111561051c578251829061050c90826109e1565b50916020019190600101906104f6565b5061052892915061052c565b5090565b808211156105285760006105408282610549565b5060010161052c565b50805461055590610958565b6000825580601f10610565575050565b601f0160209004906000526020600020908101906105839190610586565b50565b5b808211156105285760008155600101610587565b6000602082840312156105ad57600080fd5b5035919050565b600080600080606085870312156105ca57600080fd5b84359350602085013567ffffffffffffffff808211156105e957600080fd5b818701915087601f8301126105fd57600080fd5b81358181111561060c57600080fd5b8860208260051b850101111561062157600080fd5b95986020929092019750949560400135945092505050565b80356001600160a01b038116811461065057600080fd5b919050565b60006020828403121561066757600080fd5b61067082610639565b9392505050565b6000806040838503121561068a57600080fd5b61069383610639565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b828110156106e3578151805185528601518685015292840192908501906001016106be565b5091979650505050505050565b6000806020838503121561070357600080fd5b823567ffffffffffffffff8082111561071b57600080fd5b818501915085601f83011261072f57600080fd5b81358181111561073e57600080fd5b8660208260061b850101111561075357600080fd5b60209290920196919550909350505050565b60208082526021908201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6040820152603760f91b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156107e5576107e56107a6565b604052919050565b600067ffffffffffffffff80841115610808576108086107a6565b8360051b60206108198183016107bc565b86815291850191818101903684111561083157600080fd5b865b848110156108b65780358681111561084b5760008081fd5b8801601f368183011261085e5760008081fd5b813588811115610870576108706107a6565b610881818301601f191688016107bc565b915080825236878285010111156108985760008081fd5b80878401888401376000908201870152845250918301918301610833565b50979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016108f857634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b03841681526040602080830182905282820184905260009190859060608501845b8781101561094b578335825282840135838301529284019290840190600101610927565b5098975050505050505050565b600181811c9082168061096c57607f821691505b60208210810361098c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156109dc57600081815260208120601f850160051c810160208610156109b95750805b601f850160051c820191505b818110156109d8578281556001016109c5565b5050505b505050565b815167ffffffffffffffff8111156109fb576109fb6107a6565b610a0f81610a098454610958565b84610992565b602080601f831160018114610a445760008415610a2c5750858301515b600019600386901b1c1916600185901b1785556109d8565b600085815260208120601f198616915b82811015610a7357888601518255948401946001909101908401610a54565b5085821015610a915787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220cb510892072de9c2328835335b2a755d4910e814aebde64d6a43df535121d3e364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3,
        "contract": "contracts/YourContract.sol:TestEvaluation",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 54,
        "contract": "contracts/YourContract.sol:TestEvaluation",
        "label": "questions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Question)44_storage)"
      },
      {
        "astId": 60,
        "contract": "contracts/YourContract.sol:TestEvaluation",
        "label": "userResponses",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_struct(UserResponse)49_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(UserResponse)49_storage)dyn_storage": {
        "base": "t_struct(UserResponse)49_storage",
        "encoding": "dynamic_array",
        "label": "struct TestEvaluation.UserResponse[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(UserResponse)49_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TestEvaluation.UserResponse[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserResponse)49_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Question)44_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TestEvaluation.Question)",
        "numberOfBytes": "32",
        "value": "t_struct(Question)44_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Question)44_storage": {
        "encoding": "inplace",
        "label": "struct TestEvaluation.Question",
        "members": [
          {
            "astId": 38,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 41,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "options",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 43,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "rightOptionIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserResponse)49_storage": {
        "encoding": "inplace",
        "label": "struct TestEvaluation.UserResponse",
        "members": [
          {
            "astId": 46,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "questionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 48,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "chosenOptionIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}