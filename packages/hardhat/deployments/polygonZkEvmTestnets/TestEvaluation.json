{
  "address": "0x6Dc26ba4aec470149d0596B2DC9F5fC4213a9830",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "testSetNumber",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chosenOptionIndex",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct TestEvaluation.UserResponse[]",
          "name": "responses",
          "type": "tuple[]"
        }
      ],
      "name": "ResponseSubmitted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "options",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "rightOptionIndex",
          "type": "uint256"
        }
      ],
      "name": "addQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "currentTestSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "testSetNumber",
          "type": "uint256"
        }
      ],
      "name": "getUserResponses",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chosenOptionIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct TestEvaluation.UserResponse[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rightOptionIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "testSetNumber",
          "type": "uint256"
        }
      ],
      "name": "startTest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chosenOptionIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct TestEvaluation.UserResponse[]",
          "name": "responses",
          "type": "tuple[]"
        }
      ],
      "name": "submitResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "testSets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "setNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe7ec30e229b43b0bdda77117f049fb40c35fc5a8547b9f99999cf38fab01a616",
  "receipt": {
    "to": null,
    "from": "0xA99AE32AA00d67bD9d1acD9b96c704AD0dEb66B1",
    "contractAddress": "0x6Dc26ba4aec470149d0596B2DC9F5fC4213a9830",
    "transactionIndex": 0,
    "gasUsed": "795005",
    "logsBloom": "0x
    "blockHash": "0x2ce0e8af3c701fc57ab5dec4f0e7f580fa043dd5faa23d634323f238e2ba1e84",
    "transactionHash": "0xe7ec30e229b43b0bdda77117f049fb40c35fc5a8547b9f99999cf38fab01a616",
    "logs": [],
    "blockNumber": 4300550,
    "cumulativeGasUsed": "795005",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3a26d54a81a37fc74455b1ecf9d76f03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"testSetNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chosenOptionIndex\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TestEvaluation.UserResponse[]\",\"name\":\"responses\",\"type\":\"tuple[]\"}],\"name\":\"ResponseSubmitted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"options\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"rightOptionIndex\",\"type\":\"uint256\"}],\"name\":\"addQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentTestSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"testSetNumber\",\"type\":\"uint256\"}],\"name\":\"getUserResponses\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chosenOptionIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct TestEvaluation.UserResponse[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rightOptionIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"testSetNumber\",\"type\":\"uint256\"}],\"name\":\"startTest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chosenOptionIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct TestEvaluation.UserResponse[]\",\"name\":\"responses\",\"type\":\"tuple[]\"}],\"name\":\"submitResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"testSets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"setNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourContract.sol\":\"TestEvaluation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/YourContract.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract TestEvaluation {\\r\\n\\r\\n    address public admin;\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"Only admin can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        admin = msg.sender; // The deployer of the contract is set as the initial admin\\r\\n    }\\r\\n\\r\\n    function transferAdmin(address newAdmin) public onlyAdmin {\\r\\n        admin = newAdmin; // Allows the current admin to transfer admin rights to another address\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    // Structure to represent a question with options and correct answer\\r\\n    struct Question {\\r\\n        uint256 id;\\r\\n        string[] options; // Array of option strings (a, b, c, d)\\r\\n        uint256 rightOptionIndex; // Index of the correct option in the options array\\r\\n    }\\r\\n\\r\\n    // Structure to represent a user's response for a question\\r\\n    struct UserResponse {\\r\\n        uint256 questionId;\\r\\n        uint256 chosenOptionIndex;\\r\\n    }\\r\\n\\r\\n    // Structure to represent a test set with questions and user responses\\r\\n    struct TestSet {\\r\\n        uint256 setNumber;\\r\\n        mapping(address => UserResponse[]) responses; // Mapping of user address to their responses\\r\\n    }\\r\\n\\r\\n    // Mapping of question ID to Question struct\\r\\n    mapping(uint256 => Question) public questions;\\r\\n\\r\\n    // Mapping of user address to TestSet number they're taking\\r\\n    mapping(address => uint256) public currentTestSet;\\r\\n\\r\\n    // Array of TestSet structs to store test data\\r\\n    TestSet[] public testSets;\\r\\n\\r\\n    // Event emitted when a user submits their test response\\r\\n    event ResponseSubmitted(address user, uint256 testSetNumber, UserResponse[] responses);\\r\\n\\r\\n    // Function to add a question to the contract\\r\\n    function addQuestion(\\r\\n        uint256 id,\\r\\n        string[] calldata options,\\r\\n        uint256 rightOptionIndex\\r\\n    ) public onlyAdmin {\\r\\n        require(options.length == 4, \\\"Question must have 4 options\\\");\\r\\n        require(rightOptionIndex < options.length, \\\"Right option index out of bounds\\\");\\r\\n        questions[id] = Question(id, options, rightOptionIndex);\\r\\n    }\\r\\n\\r\\n    // Function to start taking a test for a specific set number\\r\\n    function startTest(uint256 testSetNumber) public {\\r\\n        require(testSetNumber < testSets.length, \\\"Invalid test set number\\\");\\r\\n        currentTestSet[msg.sender] = testSetNumber;\\r\\n    }\\r\\n\\r\\n    // Function for a user to submit their test responses\\r\\n    function submitResponse(UserResponse[] calldata responses) public {\\r\\n        require(currentTestSet[msg.sender] > 0, \\\"Start a test before submitting responses\\\");\\r\\n\\r\\n        uint256 testSetNumber = currentTestSet[msg.sender];\\r\\n        TestSet storage currentTestSetStorage = testSets[testSetNumber];\\r\\n\\r\\n        for (uint256 i = 0; i < responses.length; i++) {\\r\\n            require(questions[responses[i].questionId].id > 0, \\\"Invalid question ID\\\"); // Check if question exists\\r\\n            currentTestSetStorage.responses[msg.sender].push(responses[i]);\\r\\n        }\\r\\n\\r\\n        emit ResponseSubmitted(msg.sender, testSetNumber, responses);\\r\\n        delete testSets[testSetNumber].responses[msg.sender]; // Clear user's current test set after submission\\r\\n    }\\r\\n\\r\\n    // Function to retrieve a user's responses for a specific test set (for internal use or authorized access)\\r\\n    function getUserResponses(address user, uint256 testSetNumber) public view returns (UserResponse[] memory) {\\r\\n        require(testSetNumber < testSets.length, \\\"Invalid test set number\\\");\\r\\n        return testSets[testSetNumber].responses[user];\\r\\n    }\\r\\n}\",\"keccak256\":\"0x68b528a878c39bef53099dd73047bcc9bc700e9acfd3546a966f0350ed2081d3\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610d04806100326000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806375829def1161006657806375829def1461012f57806388a13eba14610142578063bf9d24b714610155578063ce08d26d14610168578063f851a4401461018857600080fd5b806320822f521461009857806331b1b978146100be5780636dc26bd3146100fa57806372f0ee901461011a575b600080fd5b6100ab6100a63660046107c0565b6101b3565b6040519081526020015b60405180910390f35b6100e56100cc3660046107c0565b6001602052600090815260409020805460029091015482565b604080519283526020830191909152016100b5565b6100ab6101083660046107f5565b60026020526000908152604090205481565b61012d610128366004610817565b6101d9565b005b61012d61013d3660046107f5565b61030f565b61012d6101503660046107c0565b61035b565b61012d61016336600461089c565b6103b8565b61017b610176366004610911565b6105d0565b6040516100b5919061093b565b60005461019b906001600160a01b031681565b6040516001600160a01b0390911681526020016100b5565b600381815481106101c357600080fd5b6000918252602090912060029091020154905081565b6000546001600160a01b0316331461020c5760405162461bcd60e51b81526004016102039061098a565b60405180910390fd5b6004821461025c5760405162461bcd60e51b815260206004820152601c60248201527f5175657374696f6e206d75737420686176652034206f7074696f6e73000000006044820152606401610203565b8181106102ab5760405162461bcd60e51b815260206004820181905260248201527f5269676874206f7074696f6e20696e646578206f7574206f6620626f756e64736044820152606401610203565b6040805160608101909152848152602081016102c78486610a12565b815260209081018390526000868152600180835260409091208351815583830151805191936102fb938501929101906106c4565b506040820151816002015590505050505050565b6000546001600160a01b031633146103395760405162461bcd60e51b81526004016102039061098a565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60035481106103a65760405162461bcd60e51b815260206004820152601760248201527624b73b30b634b2103a32b9ba1039b2ba10373ab6b132b960491b6044820152606401610203565b33600090815260026020526040902055565b336000908152600260205260409020546104255760405162461bcd60e51b815260206004820152602860248201527f537461727420612074657374206265666f7265207375626d697474696e6720726044820152676573706f6e73657360c01b6064820152608401610203565b33600090815260026020526040812054600380549192918390811061044c5761044c610ae7565b9060005260206000209060020201905060005b838110156105515760006001600087878581811061047f5761047f610ae7565b90506040020160000135815260200190815260200160002060000154116104de5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081c5d595cdd1a5bdb881251606a1b6044820152606401610203565b336000908152600183016020526040902085858381811061050157610501610ae7565b83546001810185556000948552602090942060409091029290920192600202909101905061053c828281358155602082013560018201555050565b5050808061054990610afd565b91505061045f565b507f715963891ef5140035c886f4e2414d9e5cba8154cd8408fb2e829b5ff1c0939e338386866040516105879493929190610b24565b60405180910390a1600382815481106105a2576105a2610ae7565b600091825260208083203384526001600290930201919091019052604081206105ca9161071a565b50505050565b600354606090821061061e5760405162461bcd60e51b815260206004820152601760248201527624b73b30b634b2103a32b9ba1039b2ba10373ab6b132b960491b6044820152606401610203565b6003828154811061063157610631610ae7565b600091825260208083206001600160a01b03871684526001600290930201919091018152604080832080548251818502810185019093528083529193909284015b828210156106b857838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610672565b50505050905092915050565b82805482825590600052602060002090810192821561070a579160200282015b8281111561070a57825182906106fa9082610c0e565b50916020019190600101906106e4565b5061071692915061073e565b5090565b508054600082556002029060005260206000209081019061073b919061075b565b50565b808211156107165760006107528282610776565b5060010161073e565b5b80821115610716576000808255600182015560020161075c565b50805461078290610b85565b6000825580601f10610792575050565b601f01602090049060005260206000209081019061073b91905b8082111561071657600081556001016107ac565b6000602082840312156107d257600080fd5b5035919050565b80356001600160a01b03811681146107f057600080fd5b919050565b60006020828403121561080757600080fd5b610810826107d9565b9392505050565b6000806000806060858703121561082d57600080fd5b84359350602085013567ffffffffffffffff8082111561084c57600080fd5b818701915087601f83011261086057600080fd5b81358181111561086f57600080fd5b8860208260051b850101111561088457600080fd5b95986020929092019750949560400135945092505050565b600080602083850312156108af57600080fd5b823567ffffffffffffffff808211156108c757600080fd5b818501915085601f8301126108db57600080fd5b8135818111156108ea57600080fd5b8660208260061b85010111156108ff57600080fd5b60209290920196919550909350505050565b6000806040838503121561092457600080fd5b61092d836107d9565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561097d57815180518552860151868501529284019290850190600101610958565b5091979650505050505050565b60208082526021908201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6040820152603760f91b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610a0a57610a0a6109cb565b604052919050565b600067ffffffffffffffff80841115610a2d57610a2d6109cb565b8360051b6020610a3e8183016109e1565b868152918501918181019036841115610a5657600080fd5b865b84811015610adb57803586811115610a705760008081fd5b8801601f3681830112610a835760008081fd5b813588811115610a9557610a956109cb565b610aa6818301601f191688016109e1565b91508082523687828501011115610abd5760008081fd5b80878401888401376000908201870152845250918301918301610a58565b50979650505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201610b1d57634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b0385168152602080820185905260606040808401829052908301849052600091859160808501845b87811015610b77578435825283850135848301529382019390820190600101610b53565b509998505050505050505050565b600181811c90821680610b9957607f821691505b602082108103610bb957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610c0957600081815260208120601f850160051c81016020861015610be65750805b601f850160051c820191505b81811015610c0557828155600101610bf2565b5050505b505050565b815167ffffffffffffffff811115610c2857610c286109cb565b610c3c81610c368454610b85565b84610bbf565b602080601f831160018114610c715760008415610c595750858301515b600019600386901b1c1916600185901b178555610c05565b600085815260208120601f198616915b82811015610ca057888601518255948401946001909101908401610c81565b5085821015610cbe5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220c0f108f7e1d5c1bc6f164c5f5b118c0abfa1912f3a67a7555855f5fb922b3d5164736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806375829def1161006657806375829def1461012f57806388a13eba14610142578063bf9d24b714610155578063ce08d26d14610168578063f851a4401461018857600080fd5b806320822f521461009857806331b1b978146100be5780636dc26bd3146100fa57806372f0ee901461011a575b600080fd5b6100ab6100a63660046107c0565b6101b3565b6040519081526020015b60405180910390f35b6100e56100cc3660046107c0565b6001602052600090815260409020805460029091015482565b604080519283526020830191909152016100b5565b6100ab6101083660046107f5565b60026020526000908152604090205481565b61012d610128366004610817565b6101d9565b005b61012d61013d3660046107f5565b61030f565b61012d6101503660046107c0565b61035b565b61012d61016336600461089c565b6103b8565b61017b610176366004610911565b6105d0565b6040516100b5919061093b565b60005461019b906001600160a01b031681565b6040516001600160a01b0390911681526020016100b5565b600381815481106101c357600080fd5b6000918252602090912060029091020154905081565b6000546001600160a01b0316331461020c5760405162461bcd60e51b81526004016102039061098a565b60405180910390fd5b6004821461025c5760405162461bcd60e51b815260206004820152601c60248201527f5175657374696f6e206d75737420686176652034206f7074696f6e73000000006044820152606401610203565b8181106102ab5760405162461bcd60e51b815260206004820181905260248201527f5269676874206f7074696f6e20696e646578206f7574206f6620626f756e64736044820152606401610203565b6040805160608101909152848152602081016102c78486610a12565b815260209081018390526000868152600180835260409091208351815583830151805191936102fb938501929101906106c4565b506040820151816002015590505050505050565b6000546001600160a01b031633146103395760405162461bcd60e51b81526004016102039061098a565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60035481106103a65760405162461bcd60e51b815260206004820152601760248201527624b73b30b634b2103a32b9ba1039b2ba10373ab6b132b960491b6044820152606401610203565b33600090815260026020526040902055565b336000908152600260205260409020546104255760405162461bcd60e51b815260206004820152602860248201527f537461727420612074657374206265666f7265207375626d697474696e6720726044820152676573706f6e73657360c01b6064820152608401610203565b33600090815260026020526040812054600380549192918390811061044c5761044c610ae7565b9060005260206000209060020201905060005b838110156105515760006001600087878581811061047f5761047f610ae7565b90506040020160000135815260200190815260200160002060000154116104de5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081c5d595cdd1a5bdb881251606a1b6044820152606401610203565b336000908152600183016020526040902085858381811061050157610501610ae7565b83546001810185556000948552602090942060409091029290920192600202909101905061053c828281358155602082013560018201555050565b5050808061054990610afd565b91505061045f565b507f715963891ef5140035c886f4e2414d9e5cba8154cd8408fb2e829b5ff1c0939e338386866040516105879493929190610b24565b60405180910390a1600382815481106105a2576105a2610ae7565b600091825260208083203384526001600290930201919091019052604081206105ca9161071a565b50505050565b600354606090821061061e5760405162461bcd60e51b815260206004820152601760248201527624b73b30b634b2103a32b9ba1039b2ba10373ab6b132b960491b6044820152606401610203565b6003828154811061063157610631610ae7565b600091825260208083206001600160a01b03871684526001600290930201919091018152604080832080548251818502810185019093528083529193909284015b828210156106b857838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610672565b50505050905092915050565b82805482825590600052602060002090810192821561070a579160200282015b8281111561070a57825182906106fa9082610c0e565b50916020019190600101906106e4565b5061071692915061073e565b5090565b508054600082556002029060005260206000209081019061073b919061075b565b50565b808211156107165760006107528282610776565b5060010161073e565b5b80821115610716576000808255600182015560020161075c565b50805461078290610b85565b6000825580601f10610792575050565b601f01602090049060005260206000209081019061073b91905b8082111561071657600081556001016107ac565b6000602082840312156107d257600080fd5b5035919050565b80356001600160a01b03811681146107f057600080fd5b919050565b60006020828403121561080757600080fd5b610810826107d9565b9392505050565b6000806000806060858703121561082d57600080fd5b84359350602085013567ffffffffffffffff8082111561084c57600080fd5b818701915087601f83011261086057600080fd5b81358181111561086f57600080fd5b8860208260051b850101111561088457600080fd5b95986020929092019750949560400135945092505050565b600080602083850312156108af57600080fd5b823567ffffffffffffffff808211156108c757600080fd5b818501915085601f8301126108db57600080fd5b8135818111156108ea57600080fd5b8660208260061b85010111156108ff57600080fd5b60209290920196919550909350505050565b6000806040838503121561092457600080fd5b61092d836107d9565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b8281101561097d57815180518552860151868501529284019290850190600101610958565b5091979650505050505050565b60208082526021908201527f4f6e6c792061646d696e2063616e2063616c6c20746869732066756e6374696f6040820152603760f91b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610a0a57610a0a6109cb565b604052919050565b600067ffffffffffffffff80841115610a2d57610a2d6109cb565b8360051b6020610a3e8183016109e1565b868152918501918181019036841115610a5657600080fd5b865b84811015610adb57803586811115610a705760008081fd5b8801601f3681830112610a835760008081fd5b813588811115610a9557610a956109cb565b610aa6818301601f191688016109e1565b91508082523687828501011115610abd5760008081fd5b80878401888401376000908201870152845250918301918301610a58565b50979650505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201610b1d57634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b0385168152602080820185905260606040808401829052908301849052600091859160808501845b87811015610b77578435825283850135848301529382019390820190600101610b53565b509998505050505050505050565b600181811c90821680610b9957607f821691505b602082108103610bb957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610c0957600081815260208120601f850160051c81016020861015610be65750805b601f850160051c820191505b81811015610c0557828155600101610bf2565b5050505b505050565b815167ffffffffffffffff811115610c2857610c286109cb565b610c3c81610c368454610b85565b84610bbf565b602080601f831160018114610c715760008415610c595750858301515b600019600386901b1c1916600185901b178555610c05565b600085815260208120601f198616915b82811015610ca057888601518255948401946001909101908401610c81565b5085821015610cbe5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220c0f108f7e1d5c1bc6f164c5f5b118c0abfa1912f3a67a7555855f5fb922b3d5164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3,
        "contract": "contracts/YourContract.sol:TestEvaluation",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 63,
        "contract": "contracts/YourContract.sol:TestEvaluation",
        "label": "questions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Question)44_storage)"
      },
      {
        "astId": 67,
        "contract": "contracts/YourContract.sol:TestEvaluation",
        "label": "currentTestSet",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/YourContract.sol:TestEvaluation",
        "label": "testSets",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(TestSet)58_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TestSet)58_storage)dyn_storage": {
        "base": "t_struct(TestSet)58_storage",
        "encoding": "dynamic_array",
        "label": "struct TestEvaluation.TestSet[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(UserResponse)49_storage)dyn_storage": {
        "base": "t_struct(UserResponse)49_storage",
        "encoding": "dynamic_array",
        "label": "struct TestEvaluation.UserResponse[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(UserResponse)49_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TestEvaluation.UserResponse[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserResponse)49_storage)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Question)44_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TestEvaluation.Question)",
        "numberOfBytes": "32",
        "value": "t_struct(Question)44_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Question)44_storage": {
        "encoding": "inplace",
        "label": "struct TestEvaluation.Question",
        "members": [
          {
            "astId": 38,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 41,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "options",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 43,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "rightOptionIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TestSet)58_storage": {
        "encoding": "inplace",
        "label": "struct TestEvaluation.TestSet",
        "members": [
          {
            "astId": 51,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "setNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 57,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "responses",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_array(t_struct(UserResponse)49_storage)dyn_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserResponse)49_storage": {
        "encoding": "inplace",
        "label": "struct TestEvaluation.UserResponse",
        "members": [
          {
            "astId": 46,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "questionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 48,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "chosenOptionIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}