{
  "address": "0x9AA3ecB3449C527bA52b14253CD49D350356f529",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "testSetNumber",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chosenOptionIndex",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct TestEvaluation.UserResponse[]",
          "name": "responses",
          "type": "tuple[]"
        }
      ],
      "name": "ResponseSubmitted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "options",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "rightOptionIndex",
          "type": "uint256"
        }
      ],
      "name": "addQuestion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "currentTestSet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "testSetNumber",
          "type": "uint256"
        }
      ],
      "name": "getUserResponses",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chosenOptionIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct TestEvaluation.UserResponse[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rightOptionIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "testSetNumber",
          "type": "uint256"
        }
      ],
      "name": "startTest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "questionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chosenOptionIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct TestEvaluation.UserResponse[]",
          "name": "responses",
          "type": "tuple[]"
        }
      ],
      "name": "submitResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "testSets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "setNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcac1628969764d4fa757077fed4fef3b028e653b9a217215280be3fc722a1e2a",
  "receipt": {
    "to": null,
    "from": "0x115Fa80d1D00C38D88D2c024fe5C6f9d5ca34bE3",
    "contractAddress": "0x9AA3ecB3449C527bA52b14253CD49D350356f529",
    "transactionIndex": 0,
    "gasUsed": "713821",
    "logsBloom": "0x
    "blockHash": "0xc2a6d47d8e773cb25b5954ac6a3fb7c1a933bcd8df13e3ef572204182e40702b",
    "transactionHash": "0xcac1628969764d4fa757077fed4fef3b028e653b9a217215280be3fc722a1e2a",
    "logs": [],
    "blockNumber": 1814983,
    "cumulativeGasUsed": "713821",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "83ed16a45cf66efd3456e4ff81dc0be6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"testSetNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chosenOptionIndex\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TestEvaluation.UserResponse[]\",\"name\":\"responses\",\"type\":\"tuple[]\"}],\"name\":\"ResponseSubmitted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"options\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"rightOptionIndex\",\"type\":\"uint256\"}],\"name\":\"addQuestion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentTestSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"testSetNumber\",\"type\":\"uint256\"}],\"name\":\"getUserResponses\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chosenOptionIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct TestEvaluation.UserResponse[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rightOptionIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"testSetNumber\",\"type\":\"uint256\"}],\"name\":\"startTest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"questionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chosenOptionIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct TestEvaluation.UserResponse[]\",\"name\":\"responses\",\"type\":\"tuple[]\"}],\"name\":\"submitResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"testSets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"setNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourContract.sol\":\"TestEvaluation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/YourContract.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract TestEvaluation {\\r\\n    // Structure to represent a question with options and correct answer\\r\\n    struct Question {\\r\\n        uint256 id;\\r\\n        string[] options; // Array of option strings (a, b, c, d)\\r\\n        uint256 rightOptionIndex; // Index of the correct option in the options array\\r\\n    }\\r\\n\\r\\n    // Structure to represent a user's response for a question\\r\\n    struct UserResponse {\\r\\n        uint256 questionId;\\r\\n        uint256 chosenOptionIndex;\\r\\n    }\\r\\n\\r\\n    // Structure to represent a test set with questions and user responses\\r\\n    struct TestSet {\\r\\n        uint256 setNumber;\\r\\n        mapping(address => UserResponse[]) responses; // Mapping of user address to their responses\\r\\n    }\\r\\n\\r\\n    // Mapping of question ID to Question struct\\r\\n    mapping(uint256 => Question) public questions;\\r\\n\\r\\n    // Mapping of user address to TestSet number they're taking\\r\\n    mapping(address => uint256) public currentTestSet;\\r\\n\\r\\n    // Array of TestSet structs to store test data\\r\\n    TestSet[] public testSets;\\r\\n\\r\\n    // Event emitted when a user submits their test response\\r\\n    event ResponseSubmitted(address user, uint256 testSetNumber, UserResponse[] responses);\\r\\n\\r\\n    // Function to add a question to the contract\\r\\n    function addQuestion(\\r\\n        uint256 id,\\r\\n        string[] calldata options,\\r\\n        uint256 rightOptionIndex\\r\\n    ) public {\\r\\n        require(options.length == 4, \\\"Question must have 4 options\\\");\\r\\n        require(rightOptionIndex < options.length, \\\"Right option index out of bounds\\\");\\r\\n        questions[id] = Question(id, options, rightOptionIndex);\\r\\n    }\\r\\n\\r\\n    // Function to start taking a test for a specific set number\\r\\n    function startTest(uint256 testSetNumber) public {\\r\\n        require(testSetNumber < testSets.length, \\\"Invalid test set number\\\");\\r\\n        currentTestSet[msg.sender] = testSetNumber;\\r\\n    }\\r\\n\\r\\n    // Function for a user to submit their test responses\\r\\n    function submitResponse(UserResponse[] calldata responses) public {\\r\\n        require(currentTestSet[msg.sender] > 0, \\\"Start a test before submitting responses\\\");\\r\\n\\r\\n        uint256 testSetNumber = currentTestSet[msg.sender];\\r\\n        TestSet storage currentTestSetStorage = testSets[testSetNumber];\\r\\n\\r\\n        for (uint256 i = 0; i < responses.length; i++) {\\r\\n            require(questions[responses[i].questionId].id > 0, \\\"Invalid question ID\\\"); // Check if question exists\\r\\n            currentTestSetStorage.responses[msg.sender].push(responses[i]);\\r\\n        }\\r\\n\\r\\n        emit ResponseSubmitted(msg.sender, testSetNumber, responses);\\r\\n        delete testSets[testSetNumber].responses[msg.sender]; // Clear user's current test set after submission\\r\\n    }\\r\\n\\r\\n    // Function to retrieve a user's responses for a specific test set (for internal use or authorized access)\\r\\n    function getUserResponses(address user, uint256 testSetNumber) public view returns (UserResponse[] memory) {\\r\\n        require(testSetNumber < testSets.length, \\\"Invalid test set number\\\");\\r\\n        return testSets[testSetNumber].responses[user];\\r\\n    }\\r\\n}\",\"keccak256\":\"0xae5eb4ea0634c7a5bcba917c800083c59d64bfdc3f4c3cc98ece4ec86e3aa355\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610bf4806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806372f0ee901161005b57806372f0ee901461010457806388a13eba14610119578063bf9d24b71461012c578063ce08d26d1461013f57600080fd5b806320822f521461008257806331b1b978146100a85780636dc26bd3146100e4575b600080fd5b6100956100903660046106f1565b61015f565b6040519081526020015b60405180910390f35b6100cf6100b63660046106f1565b6000602081905290815260409020805460029091015482565b6040805192835260208301919091520161009f565b6100956100f2366004610726565b60016020526000908152604090205481565b610117610112366004610748565b610185565b005b6101176101273660046106f1565b61028d565b61011761013a3660046107cd565b6102ea565b61015261014d366004610842565b610501565b60405161009f919061086c565b6002818154811061016f57600080fd5b6000918252602090912060029091020154905081565b600482146101da5760405162461bcd60e51b815260206004820152601c60248201527f5175657374696f6e206d75737420686176652034206f7074696f6e730000000060448201526064015b60405180910390fd5b8181106102295760405162461bcd60e51b815260206004820181905260248201527f5269676874206f7074696f6e20696e646578206f7574206f6620626f756e647360448201526064016101d1565b6040805160608101909152848152602081016102458486610902565b81526020908101839052600086815280825260409020825181558282015180519192610279926001850192909101906105f5565b506040820151816002015590505050505050565b60025481106102d85760405162461bcd60e51b815260206004820152601760248201527624b73b30b634b2103a32b9ba1039b2ba10373ab6b132b960491b60448201526064016101d1565b33600090815260016020526040902055565b336000908152600160205260409020546103575760405162461bcd60e51b815260206004820152602860248201527f537461727420612074657374206265666f7265207375626d697474696e6720726044820152676573706f6e73657360c01b60648201526084016101d1565b33600090815260016020526040812054600280549192918390811061037e5761037e6109d7565b9060005260206000209060020201905060005b838110156104825760008060008787858181106103b0576103b06109d7565b905060400201600001358152602001908152602001600020600001541161040f5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081c5d595cdd1a5bdb881251606a1b60448201526064016101d1565b3360009081526001830160205260409020858583818110610432576104326109d7565b83546001810185556000948552602090942060409091029290920192600202909101905061046d828281358155602082013560018201555050565b5050808061047a906109ed565b915050610391565b507f715963891ef5140035c886f4e2414d9e5cba8154cd8408fb2e829b5ff1c0939e338386866040516104b89493929190610a14565b60405180910390a1600282815481106104d3576104d36109d7565b600091825260208083203384526001600290930201919091019052604081206104fb9161064b565b50505050565b600254606090821061054f5760405162461bcd60e51b815260206004820152601760248201527624b73b30b634b2103a32b9ba1039b2ba10373ab6b132b960491b60448201526064016101d1565b60028281548110610562576105626109d7565b600091825260208083206001600160a01b03871684526001600290930201919091018152604080832080548251818502810185019093528083529193909284015b828210156105e9578382906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906105a3565b50505050905092915050565b82805482825590600052602060002090810192821561063b579160200282015b8281111561063b578251829061062b9082610afe565b5091602001919060010190610615565b5061064792915061066f565b5090565b508054600082556002029060005260206000209081019061066c919061068c565b50565b8082111561064757600061068382826106a7565b5060010161066f565b5b80821115610647576000808255600182015560020161068d565b5080546106b390610a75565b6000825580601f106106c3575050565b601f01602090049060005260206000209081019061066c91905b8082111561064757600081556001016106dd565b60006020828403121561070357600080fd5b5035919050565b80356001600160a01b038116811461072157600080fd5b919050565b60006020828403121561073857600080fd5b6107418261070a565b9392505050565b6000806000806060858703121561075e57600080fd5b84359350602085013567ffffffffffffffff8082111561077d57600080fd5b818701915087601f83011261079157600080fd5b8135818111156107a057600080fd5b8860208260051b85010111156107b557600080fd5b95986020929092019750949560400135945092505050565b600080602083850312156107e057600080fd5b823567ffffffffffffffff808211156107f857600080fd5b818501915085601f83011261080c57600080fd5b81358181111561081b57600080fd5b8660208260061b850101111561083057600080fd5b60209290920196919550909350505050565b6000806040838503121561085557600080fd5b61085e8361070a565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b828110156108ae57815180518552860151868501529284019290850190600101610889565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156108fa576108fa6108bb565b604052919050565b600067ffffffffffffffff8084111561091d5761091d6108bb565b8360051b602061092e8183016108d1565b86815291850191818101903684111561094657600080fd5b865b848110156109cb578035868111156109605760008081fd5b8801601f36818301126109735760008081fd5b813588811115610985576109856108bb565b610996818301601f191688016108d1565b915080825236878285010111156109ad5760008081fd5b80878401888401376000908201870152845250918301918301610948565b50979650505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201610a0d57634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b0385168152602080820185905260606040808401829052908301849052600091859160808501845b87811015610a67578435825283850135848301529382019390820190600101610a43565b509998505050505050505050565b600181811c90821680610a8957607f821691505b602082108103610aa957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610af957600081815260208120601f850160051c81016020861015610ad65750805b601f850160051c820191505b81811015610af557828155600101610ae2565b5050505b505050565b815167ffffffffffffffff811115610b1857610b186108bb565b610b2c81610b268454610a75565b84610aaf565b602080601f831160018114610b615760008415610b495750858301515b600019600386901b1c1916600185901b178555610af5565b600085815260208120601f198616915b82811015610b9057888601518255948401946001909101908401610b71565b5085821015610bae5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212202f1a188f288a9447a55d33c358007d0fb2ed43399b5195d48b4a66e5bd04c7df64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806372f0ee901161005b57806372f0ee901461010457806388a13eba14610119578063bf9d24b71461012c578063ce08d26d1461013f57600080fd5b806320822f521461008257806331b1b978146100a85780636dc26bd3146100e4575b600080fd5b6100956100903660046106f1565b61015f565b6040519081526020015b60405180910390f35b6100cf6100b63660046106f1565b6000602081905290815260409020805460029091015482565b6040805192835260208301919091520161009f565b6100956100f2366004610726565b60016020526000908152604090205481565b610117610112366004610748565b610185565b005b6101176101273660046106f1565b61028d565b61011761013a3660046107cd565b6102ea565b61015261014d366004610842565b610501565b60405161009f919061086c565b6002818154811061016f57600080fd5b6000918252602090912060029091020154905081565b600482146101da5760405162461bcd60e51b815260206004820152601c60248201527f5175657374696f6e206d75737420686176652034206f7074696f6e730000000060448201526064015b60405180910390fd5b8181106102295760405162461bcd60e51b815260206004820181905260248201527f5269676874206f7074696f6e20696e646578206f7574206f6620626f756e647360448201526064016101d1565b6040805160608101909152848152602081016102458486610902565b81526020908101839052600086815280825260409020825181558282015180519192610279926001850192909101906105f5565b506040820151816002015590505050505050565b60025481106102d85760405162461bcd60e51b815260206004820152601760248201527624b73b30b634b2103a32b9ba1039b2ba10373ab6b132b960491b60448201526064016101d1565b33600090815260016020526040902055565b336000908152600160205260409020546103575760405162461bcd60e51b815260206004820152602860248201527f537461727420612074657374206265666f7265207375626d697474696e6720726044820152676573706f6e73657360c01b60648201526084016101d1565b33600090815260016020526040812054600280549192918390811061037e5761037e6109d7565b9060005260206000209060020201905060005b838110156104825760008060008787858181106103b0576103b06109d7565b905060400201600001358152602001908152602001600020600001541161040f5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081c5d595cdd1a5bdb881251606a1b60448201526064016101d1565b3360009081526001830160205260409020858583818110610432576104326109d7565b83546001810185556000948552602090942060409091029290920192600202909101905061046d828281358155602082013560018201555050565b5050808061047a906109ed565b915050610391565b507f715963891ef5140035c886f4e2414d9e5cba8154cd8408fb2e829b5ff1c0939e338386866040516104b89493929190610a14565b60405180910390a1600282815481106104d3576104d36109d7565b600091825260208083203384526001600290930201919091019052604081206104fb9161064b565b50505050565b600254606090821061054f5760405162461bcd60e51b815260206004820152601760248201527624b73b30b634b2103a32b9ba1039b2ba10373ab6b132b960491b60448201526064016101d1565b60028281548110610562576105626109d7565b600091825260208083206001600160a01b03871684526001600290930201919091018152604080832080548251818502810185019093528083529193909284015b828210156105e9578382906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906105a3565b50505050905092915050565b82805482825590600052602060002090810192821561063b579160200282015b8281111561063b578251829061062b9082610afe565b5091602001919060010190610615565b5061064792915061066f565b5090565b508054600082556002029060005260206000209081019061066c919061068c565b50565b8082111561064757600061068382826106a7565b5060010161066f565b5b80821115610647576000808255600182015560020161068d565b5080546106b390610a75565b6000825580601f106106c3575050565b601f01602090049060005260206000209081019061066c91905b8082111561064757600081556001016106dd565b60006020828403121561070357600080fd5b5035919050565b80356001600160a01b038116811461072157600080fd5b919050565b60006020828403121561073857600080fd5b6107418261070a565b9392505050565b6000806000806060858703121561075e57600080fd5b84359350602085013567ffffffffffffffff8082111561077d57600080fd5b818701915087601f83011261079157600080fd5b8135818111156107a057600080fd5b8860208260051b85010111156107b557600080fd5b95986020929092019750949560400135945092505050565b600080602083850312156107e057600080fd5b823567ffffffffffffffff808211156107f857600080fd5b818501915085601f83011261080c57600080fd5b81358181111561081b57600080fd5b8660208260061b850101111561083057600080fd5b60209290920196919550909350505050565b6000806040838503121561085557600080fd5b61085e8361070a565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b828110156108ae57815180518552860151868501529284019290850190600101610889565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156108fa576108fa6108bb565b604052919050565b600067ffffffffffffffff8084111561091d5761091d6108bb565b8360051b602061092e8183016108d1565b86815291850191818101903684111561094657600080fd5b865b848110156109cb578035868111156109605760008081fd5b8801601f36818301126109735760008081fd5b813588811115610985576109856108bb565b610996818301601f191688016108d1565b915080825236878285010111156109ad5760008081fd5b80878401888401376000908201870152845250918301918301610948565b50979650505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201610a0d57634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b0385168152602080820185905260606040808401829052908301849052600091859160808501845b87811015610a67578435825283850135848301529382019390820190600101610a43565b509998505050505050505050565b600181811c90821680610a8957607f821691505b602082108103610aa957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610af957600081815260208120601f850160051c81016020861015610ad65750805b601f850160051c820191505b81811015610af557828155600101610ae2565b5050505b505050565b815167ffffffffffffffff811115610b1857610b186108bb565b610b2c81610b268454610a75565b84610aaf565b602080601f831160018114610b615760008415610b495750858301515b600019600386901b1c1916600185901b178555610af5565b600085815260208120601f198616915b82811015610b9057888601518255948401946001909101908401610b71565b5085821015610bae5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212202f1a188f288a9447a55d33c358007d0fb2ed43399b5195d48b4a66e5bd04c7df64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 28,
        "contract": "contracts/YourContract.sol:TestEvaluation",
        "label": "questions",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Question)9_storage)"
      },
      {
        "astId": 32,
        "contract": "contracts/YourContract.sol:TestEvaluation",
        "label": "currentTestSet",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 36,
        "contract": "contracts/YourContract.sol:TestEvaluation",
        "label": "testSets",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(TestSet)23_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TestSet)23_storage)dyn_storage": {
        "base": "t_struct(TestSet)23_storage",
        "encoding": "dynamic_array",
        "label": "struct TestEvaluation.TestSet[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(UserResponse)14_storage)dyn_storage": {
        "base": "t_struct(UserResponse)14_storage",
        "encoding": "dynamic_array",
        "label": "struct TestEvaluation.UserResponse[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(UserResponse)14_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TestEvaluation.UserResponse[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserResponse)14_storage)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Question)9_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TestEvaluation.Question)",
        "numberOfBytes": "32",
        "value": "t_struct(Question)9_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Question)9_storage": {
        "encoding": "inplace",
        "label": "struct TestEvaluation.Question",
        "members": [
          {
            "astId": 3,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "options",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 8,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "rightOptionIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TestSet)23_storage": {
        "encoding": "inplace",
        "label": "struct TestEvaluation.TestSet",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "setNumber",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 22,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "responses",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_array(t_struct(UserResponse)14_storage)dyn_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserResponse)14_storage": {
        "encoding": "inplace",
        "label": "struct TestEvaluation.UserResponse",
        "members": [
          {
            "astId": 11,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "questionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13,
            "contract": "contracts/YourContract.sol:TestEvaluation",
            "label": "chosenOptionIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}